######################################################################
#
# Software Name : Cloudnet TOSCA toolbox
# Version: 1.0
# SPDX-FileCopyrightText: Copyright (c) 2020-22 Orange
# SPDX-License-Identifier: Apache-2.0
#
# This software is distributed under the Apache License 2.0
# the text of which is available at http://www.apache.org/licenses/LICENSE-2.0
# or see the "LICENSE-2.0.txt" file for more details.
#
# Authors:
#   Frédéric Klamm <frederic.klamm@orange.com>,
#   Philippe Merle <philippe.merle@inria.fr>
# Software description: TOSCA to Cloudnet Translator
######################################################################

$id: tosca_simple_yaml_1_3
title: OASIS TOSCA Simple Profile in YAML Version 1.3 JSON Schema
description: JSON Schema for OASIS TOSCA Simple Profile in YAML Version 1.3
$ref: "#/definitions/service_template_definition"

definitions:

  value: { } # any value

  # Section 3.3.2
  version:
    anyOf:
      - type: string # TODO: define pattern
      - type: number

  # Section 3.3.3   range of integer, mainly the occurrences' type
  range:
    type: array
    items:
      - type: integer
        minimum: 0 # must be positive
      - oneOf: # the second item is either a positive integer or the UNBOUNDED constant
          - type: integer
            minimum: 0 # must be positive
          - enum: [ UNBOUNDED ] # const: UNBOUNDED does not work!
    minItems: 2
    maxItems: 2

  # Section 3.3.4 and section 3.3.5 are covered by yaml

  # Section 3.3.6
  scalar_unit:
    type: string
    pattern: ^[0-9]+( )*[A-Za-z]+$

  # Section 3.4.3
  directives:
    type: array
    items:
      type: string
      enum:
        - substitute
        - substitutable
        - select
        - selectable
    maxItems: 2

  # Section 3.6.1
  description:
    type: string

  # Section 3.6.2
  metadata:
    type: object
    additionalProperties:
      anyOf:
        - type: string
        - type: number

  # Section 3.6.3
  constraint_clause:
    oneOf:
      - $ref: "#/definitions/scalar" # implicit equal operator
      - $ref: "#/definitions/constraint_clause_with_operator"

  constraint_clause_with_operator:
    type: object
    properties:
      equal:
        $ref: "#/definitions/value"
      greater_than:
        $ref: "#/definitions/value"
      greater_or_equal:
        $ref: "#/definitions/value"
      less_than:
        $ref: "#/definitions/value"
      less_or_equal:
        $ref: "#/definitions/value"
      in_range:
        type: array
        items:
          - $ref: "#/definitions/value"
          - $ref: "#/definitions/value"
        maxItems: 2
      valid_values:
        type: array # of any values
        items:
          $ref: "#/definitions/value"
      length:
        type: integer
        minimum: 0
      min_length:
        type: integer
        minimum: 0
      max_length:
        type: integer
        minimum: 0
      pattern:
        type: string
      schema:
        type: string
    additionalProperties: false
    minProperties: 1
    maxProperties: 1

  scalar:
    anyOf:
      - type: boolean
      - type: string
      - type: number

  # Section 3.6.4
  property_filter_definition:
    type: object
    additionalProperties:
      oneOf:
      - $ref: "#/definitions/constraint_clause"
      - type: array
        items:
          $ref: "#/definitions/constraint_clause"
    minProperties: 1
    maxProperties: 1

  # Section 3.6.5
  node_filter_definition:
    type: object
    properties:
      properties:
        type: array
        items:
          $ref: "#/definitions/property_filter_definition"
      capabilities:
        type: array
        items:
          type: object
          additionalProperties:
            type: object
            properties:
              properties:
                type: array
                items:
                  $ref: "#/definitions/property_filter_definition"
            additionalProperties: false
    additionalProperties: false

  # Section 3.6.6
  repository_definition:
    anyOf:
      - type: string
      - type: object
        properties:
          description:
            $ref: "#/definitions/description"
          url:
            type: string
          credential:
            type: object # ISSUE: Credential not defined
        required: [ url ]
        additionalProperties: false

  # Section 3.6.7
  artifact_definition:
    anyOf:
      - type: string
#        format: uri # commented as file paths are not URI most of the time.
      - type: object
        properties:
          type:
            type: string
          file:
            type: string
#            format: uri # commented as file paths are not URI most of the time.
          repository:
            type: string
          description:
            $ref: "#/definitions/description"
          deploy_path:
            type: string
          artifact_version:
            type: string
          checksum:
            type: string
          checksum_algorithm:
            type: string
          properties:
            type: object
            additionalProperties:
              $ref: "#/definitions/property_assignment"
        additionalProperties: false
        required: [ type, file ]

  # Section 3.6.8
  import_definition:
    anyOf:
      - type: string
      - type: object
        properties:
          file:
            type: string
          repository:
            type: string
          namespace_prefix:
            type: string
          namespace_uri:
            type: string
            format: uri
        required: [ file ]
        additionalProperties: false

  # Section 3.6.9
  schema_definition:
    type: object
    properties:
      type:
        type: string
      description:
        $ref: "#/definitions/description"
      constraints:
        type: array
        items:
          $ref: "#/definitions/constraint_clause"
      key_schema:
        $ref: "#/definitions/schema_definition"
      entry_schema:
        $ref: "#/definitions/schema_definition"
    required: [ type ]
    additionalProperties: false

  # Section 3.6.10
  property_definition:
    anyOf:
      # Section 3.6.10.4
      - type: object
        properties:
          type:
            type: string
          description:
            $ref: "#/definitions/description"
          required:
            type: boolean
          default:
            $ref: "#/definitions/value"
          status:
            $ref: "#/definitions/status"
          constraints:
            type: array
            items:
              $ref: "#/definitions/constraint_clause"
          key_schema:
            $ref: "#/definitions/schema_definition"
          entry_schema:
            $ref: "#/definitions/schema_definition"
          external_schema:
            type: string
          metadata:
            $ref: "#/definitions/metadata"
        additionalProperties: false
        required: [ type ]
      # Section 3.6.10.6 Refining Property Definitions
      - $ref: "#/definitions/parameter_definition"
      # Example at end of Section 3.6.10.8
      - $ref: "#/definitions/value"

  status:
    type: string
    enum:
      - supported
      - unsupported
      - experimental
      - deprecated

  # Section 3.6.11
  property_assignment:
    $ref: "#/definitions/value"

  # Section 3.6.12
  attribute_definition:
    type: object
    properties:
      type:
        type: string
      description:
        $ref: "#/definitions/description"
      default:
        $ref: "#/definitions/value"
      status:
        $ref: "#/definitions/status"
      key_schema:
        $ref: "#/definitions/schema_definition"
      entry_schema:
        $ref: "#/definitions/schema_definition"
    additionalProperties: false
    required: [ type ]

  # Section 3.6.13
  attribute_assignment:
    $ref: "#/definitions/value"

  # Section 3.6.14
  parameter_definition:
    type: object
    properties:
      type:
        type: string
      description:
        $ref: "#/definitions/description"
      required:
        type: boolean
      default:
        $ref: "#/definitions/value"
      status:
        $ref: "#/definitions/status"
      constraints:
        type: array
        items:
          $ref: "#/definitions/constraint_clause"
      key_schema:
        $ref: "#/definitions/schema_definition"
      entry_schema:
        $ref: "#/definitions/schema_definition"
      external_schema:
        type: string
      metadata:
        $ref: "#/definitions/metadata"
      value:
        $ref: "#/definitions/value"
    additionalProperties: false

  # The specification is not clear on what parameter assignment is.
  # Following implements lines 1643 and 1644 of Section 3.6.14.2.
  parameter_assignment:
    anyOf:
      - $ref: "#/definitions/value"
      - type: object
        properties:
          value:
            $ref: "#/definitions/value"
        minProperties: 1
        maxProperties: 1
        additionalProperties: false

  # Section 3.6.15
  attribute_mapping_definition:
      type: array
      items:
        type: string
      minItems: 2
      maxItems: 4

  # Section 3.6.16
  operation_implementation_definition:
    anyOf:
      - type: string
      - type: object
        properties:
          primary:
            $ref: "#/definitions/artifact_definition"
          dependencies:
            type: array
            items:
              $ref: "#/definitions/artifact_definition"
          timeout:
            type: integer
            minimum: 0
          operation_host:
            type: string
            enum:
              - SELF
              - HOST
              - SOURCE
              - TARGET
              - ORCHESTRATOR
        additionalProperties: false

  # Section 3.6.17
  operation_definition_in_types:
    anyOf:
      - type: string
      - type: object
        properties:
          description:
            $ref: "#/definitions/description"
          implementation:
            $ref: "#/definitions/operation_implementation_definition"
          inputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/parameter_definition"
          outputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/attribute_mapping"
        additionalProperties: false

  operation_definition_in_templates:
    anyOf:
      - type: string
      - type: object
        properties:
          description:
            $ref: "#/definitions/description"
          implementation:
            $ref: "#/definitions/operation_implementation_definition"
          inputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/property_assignment"
          outputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/attribute_mapping"
        additionalProperties: false

  # Section 3.6.18
  notification_implementation_definition:
    anyOf:
      - type: string
      - type: object
        properties:
          primary:
            $ref: "#/definitions/artifact_definition"
          dependencies:
            type: array
            items:
              $ref: "#/definitions/artifact_definition"
        additionalProperties: false

  # Section 3.6.19
  # The difference between definition in types and definition in templates is not yet clearly stated in the specification
  # So here we use the same principle as the one stated for operations
  notification_definition_in_types:
    anyOf:
      - type: string
      - type: object
        properties:
          description:
            $ref: "#/definitions/description"
          implementation:
            $ref: "#/definitions/notification_implementation_definition"
          outputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/attribute_mapping_definition"
        additionalProperties: false

  notification_definition_in_templates:
    anyOf:
      - type: string
      - type: object
        properties:
          description:
            $ref: "#/definitions/description"
          implementation:
            $ref: "#/definitions/notification_implementation_definition"
        additionalProperties: false

  # Section 3.6.20
  interface_definition_in_types:
    type: object
    properties:
      description:
        $ref: "#/definitions/description"
      type:
        type: string
      inputs:
        type: object
        additionalProperties:
          $ref: "#/definitions/parameter_definition"
      operations:
        type: object
        additionalProperties:
          $ref: "#/definitions/operation_definition_in_types"
      notifications:
        type: object
        additionalProperties:
          $ref: "#/definitions/notification_definition_in_types"
    additionalProperties: false

  interface_definition_in_templates:
    type: object
    properties:
      description:
        $ref: "#/definitions/description"
      type:
        type: string
      inputs:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_assignment"
      operations:
        type: object
        additionalProperties:
          $ref: "#/definitions/operation_definition_in_templates"
      notifications:
        type: object
        additionalProperties:
          $ref: "#/definitions/notification_definition_in_templates"
    additionalProperties: false

  # Section 3.6.21
  event_filter_definition:
    type: object
    properties:
      node:
        type: string
      requirement:
        type: string
      capability:
        type: string
    additionalProperties: false
    required: [node]

  # Section 3.6.22
  trigger_definition:
    type: object
    properties:
      description:
        $ref: "#/definitions/description"
      event:
        type: string
      schedule:
        type: object
        properties:
          start_time:
            # ISSUE: JSON schema has no timestamp type
            {}
          end_time:
            # ISSUE: JSON schema has no timestamp type
            {}
        additionalProperties: false
        required: [ start_time, end_time]
      target_filter:
        $ref: "#/definitions/event_filter_definition"
      condition:
        oneOf:
          # condition short notation
          - $ref: "#/definitions/condition_clause_definition"
          # condition extended notation
          - type: object
            properties:
              constraint:
                oneOf:
                  - $ref: "#/definitions/condition_clause_definition"
                  #PM: Added support for multiple conditions following the TOSCA TC
                  #PM: positive reply to the ETSI NFV SOL 001 TC question about this
                  - type: array
                    items:
                      $ref: "#/definitions/condition_clause_definition"
              period:
                $ref: "#/definitions/scalar_unit"
              evaluations:
                type: integer
              method:
                type: string
            additionalProperties: false
          #PM: Added support for multiple conditions following the TOSCA TC
          #PM: positive reply to the ETSI NFV SOL 001 TC question about this
          - type: array
            items:
              $ref: "#/definitions/condition_clause_definition"
      action:
        type: array
        items:
          $ref: "#/definitions/activity_definition"
    additionalProperties: false
    required: [ event, action ]

  # Section 3.6.23
  activity_definition:
    type: object
    properties:
      delegate:
        $ref: "#/definitions/delegate_workflow_activity_definition"
      set_state:
        $ref: "#/definitions/set_state_activity_definition"
      call_operation:
        $ref: "#/definitions/call_operation_activity_definition"
      inline:
        $ref: "#/definitions/inline_workflow_activity_definition"
    additionalProperties: false
    minProperties: 1
    maxProperties: 1

  delegate_workflow_activity_definition:
    oneOf:
      - type: string
      - type: object
        properties:
          workflow:
            type: string
          inputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/parameter_assignment"
        additionalProperties: false

  set_state_activity_definition:
    type: string

  call_operation_activity_definition:
    oneOf:
      - type: string
      - type: object
        properties:
          operation:
            type: string
          inputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/parameter_assignment"
        additionalProperties: false

  inline_workflow_activity_definition:
    oneOf:
      - type: string
      - type: object
        properties:
          workflow:
            type: string
          inputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/parameter_assignment"
        additionalProperties: false

  # Section 3.6.24
  assertion_definition:
    type: object
    additionalProperties:
      type: array
      items:
        $ref: "#/definitions/constraint_clause"
    minProperties: 1
    maxProperties: 1

  # Section 3.6.25
  condition_clause_definition:
    type: object
    properties:
      and:
        type: array
        items:
          $ref: "#/definitions/condition_clause_definition"
      or:
        type: array
        items:
          $ref: "#/definitions/condition_clause_definition"
      not:
        type: array
        items:
          $ref: "#/definitions/condition_clause_definition"
      # assert is deprecated from 1.3 onwards
      assert:
        type: array
        items:
          $ref: "#/definitions/assertion_definition"
    additionalProperties:
      type: array
      items:
        $ref: "#/definitions/constraint_clause"
    minProperties: 1
    maxProperties: 1

  # Section 3.6.26
  workflow_precondition_definition:
    type: object
    properties:
      target:
        type: string
      target_relationship:
        type: string
      condition:
        type: array
        items:
          $ref: "#/definitions/condition_clause_definition"
    additionalProperties: false
    required: [ target ]

  # Section 3.6.27
  workflow_step_definition:
    type: object
    properties:
      target:
        type: string
      target_relationship:
        type: string
      operation_host:
        type: string
      filter:
        type: array
        items:
          $ref: "#/definitions/condition_clause_definition"
      activities:
        type: array
        items:
          $ref: "#/definitions/activity_definition"
      on_success:
        type: array
        items:
          type: string
#          $ref: "#/definitions/workflow_step_definition"
      on_failure:
        type: array
        items:
          type: string
#          $ref: "#/definitions/workflow_step_definition"
    additionalProperties: false
    required: [ target, activities ]

  # Section 3.7.1
  entity_type:
    type: object
    properties:
      derived_from:
        type: string
      version:
        $ref: "#/definitions/version"
      metadata:
        $ref: "#/definitions/metadata"
      description:
        $ref: "#/definitions/description"

  # Section 3.7.2
  capability_definition:
    anyOf:
      - type: string
      - type: object
        properties:
          type:
            type: string
          description:
            $ref: "#/definitions/description"
          properties:
            type: object
            additionalProperties:
              $ref: "#/definitions/property_definition"
          attributes:
            type: object
            additionalProperties:
              $ref: "#/definitions/attribute_definition"
          valid_source_types:
            type: array
            items:
              type: string
            minItems: 1
          occurrences:
            $ref: "#/definitions/occurrences"
        additionalProperties: false
#       required: [ type ] # type is required but can be set into the parent definition.
        # So type requirement is checked by TypeChecker.

  occurrences:
    $ref: "#/definitions/range"

  # Section 3.7.3
  requirement_definition:
    anyOf:
      - type: string
      - type: object
        properties:
          description: # ISSUE: Not defined but used in TOSCA spec.
            $ref: "#/definitions/description"
          capability:
            type: string
          node:
            type: string
          relationship:
            anyOf:
              - type: string
              - type: object
                properties:
                  type:
                    type: string
                  interfaces:
                    type: object
                    additionalProperties:
                      $ref: "#/definitions/interface_definition_in_types"
                additionalProperties: false
#               required: [ type ] # type is required but can be set into the parent definition.
                # So type requirement is checked by TypeChecker.
          occurrences:
            $ref: "#/definitions/occurrences"
        additionalProperties: false
        # In Section 3.7.3.1 of TOSCA Simple Profile in YAML Version 1.3 (http://docs.oasis-open.org/tosca/TOSCA-Simple-Profile-YAML/v1.3/)
        # the capability keyname is required, so following line should be added to the schema
        # required: [ capability ]
        # but the capability keyname is missed in Section 9.3.1.2.
        # So we decided to not force the presence of the capability keyname.
        # See discussion in https://github.com/Orange-OpenSource/Cloudnet-TOSCA-toolbox/commit/b03ed5d21f0f125585d93acfd815a2529679d5b0#diff-7ca05615622006ebd1a45fbe021367285247ee8f9f821a3629b3b3697331a47d.

  # Section 3.7.4
  artifact_type:
    type: object
    properties:
      derived_from:
        type: string
      version:
        $ref: "#/definitions/version"
      metadata:
        $ref: "#/definitions/metadata"
      description:
        $ref: "#/definitions/description"
      mime_type:
        type: string
      file_ext:
        type: array
        items:
          type: string
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_definition"
    additionalProperties: false

  # Section 3.7.5
  interface_type:
    type: object
    anyOf:
      - properties:
          derived_from:
            type: string
          version:
            $ref: "#/definitions/version"
          metadata:
            $ref: "#/definitions/metadata"
          description:
            $ref: "#/definitions/description"
          inputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/parameter_definition"
          operations:
            type: object
            additionalProperties:
              $ref: "#/definitions/operation_definition_in_types"
          notifications:
            type: object
            additionalProperties:
              $ref: "#/definitions/notification_definition_in_types"
        additionalProperties: false
      # Deprecated case where neither 'operations' nor 'notifications' are specified
      - properties:
          derived_from:
            type: string
          version:
            $ref: "#/definitions/version"
          metadata:
            $ref: "#/definitions/metadata"
          description:
            $ref: "#/definitions/description"
        additionalProperties:
          $ref: "#/definitions/operation_definition_in_types"

  # Section 3.7.6    to be double-checked
  data_type:
    type: object
    properties:
      derived_from:
        type: string
      version:
        $ref: "#/definitions/version"
      metadata:
        $ref: "#/definitions/metadata"
      description:
        $ref: "#/definitions/description"
      # make sense only for simple datatypes:
      constraints:
        type: array
        items:
          $ref: "#/definitions/constraint_clause"
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_definition"
      # makes sense only for datatypes derived from tosca map:
      key_schema:
        $ref: "#/definitions/schema_definition"
      # makes sense only for datatypes derived from tosca map or list:
      entry_schema:
        $ref: "#/definitions/schema_definition"
    additionalProperties: false

  # Section 3.7.7
  capability_type:
    type: object
    properties:
      derived_from:
        type: string
      version:
        $ref: "#/definitions/version"
      metadata:
        $ref: "#/definitions/metadata"
      description:
         $ref: "#/definitions/description"
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_definition"
      attributes:
        type: object
        additionalProperties:
          $ref: "#/definitions/attribute_definition"
      valid_source_types:
        type: array
        items:
          type: string
    additionalProperties: false

  # Section 3.7.9
  node_type:
    type: object
    properties:
      derived_from:
        type: string
      version:
        $ref: "#/definitions/version"
      metadata:
        $ref: "#/definitions/metadata"
      description:
        $ref: "#/definitions/description"
      attributes:
        type: object
        additionalProperties:
          $ref: "#/definitions/attribute_definition"
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_definition"
      requirements:
        type: array
        items:
          type: object
          additionalProperties:
            $ref: "#/definitions/requirement_definition"
          maxProperties: 1
      capabilities:
        type: object
        additionalProperties:
          $ref: "#/definitions/capability_definition"
      interfaces:
        type: object
        additionalProperties:
          $ref: "#/definitions/interface_definition_in_types"
      artifacts:
        type: object
        additionalProperties:
          $ref: "#/definitions/artifact_definition"
    additionalProperties: false

  # Section 3.7.10
  relationship_type:
    type: object
    properties:
      derived_from:
        type: string
      version:
        $ref: "#/definitions/version"
      metadata:
        $ref: "#/definitions/metadata"
      description:
        $ref: "#/definitions/description"
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_definition"
      attributes:
        type: object
        additionalProperties:
          $ref: "#/definitions/attribute_definition"
      interfaces:
        type: object
        additionalProperties:
          $ref: "#/definitions/interface_definition_in_types"
      valid_target_types:
        type: array
        items:
          type: string
    additionalProperties: false

  # Section 3.7.11
  group_type:
    type: object
    properties:
      derived_from:
        type: string
      version:
        $ref: "#/definitions/version"
      metadata:
        $ref: "#/definitions/metadata"
      description:
        $ref: "#/definitions/description"
      attributes:
        type: object
        additionalProperties:
          $ref: "#/definitions/attribute_definition"
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_definition"
      members:
        type: array
        items:
          type: string
      requirements:
        type: array
        items:
          type: object
          additionalProperties:
            $ref: "#/definitions/requirement_definition"
          maxProperties: 1
      capabilities:
        type: object
        additionalProperties:
          $ref: "#/definitions/capability_definition"
      interfaces:
        type: object
        additionalProperties:
          $ref: "#/definitions/interface_definition_in_types"
    additionalProperties: false

  # Section 3.7.12
  policy_type:
    type: object
    properties:
      derived_from:
        type: string
      version:
        $ref: "#/definitions/version"
      metadata:
        $ref: "#/definitions/metadata"
      description:
       $ref: "#/definitions/description"
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_definition"
      targets:
        type: array
        items:
          type: string
      triggers:
        type: object
        additionalProperties:
          $ref: "#/definitions/trigger_definition"
    additionalProperties: false

  # Section 3.8.1
  capability_assignment:
    anyOf:
      - type: object
        properties:
          properties:
            type: object
            additionalProperties:
              $ref: "#/definitions/property_assignment"
          attributes:
            type: object
            additionalProperties:
              $ref: "#/definitions/attribute_assignment"
          occurrences:
            $ref: "#/definitions/occurrences"
        additionalProperties: false

  # Section 3.8.2
  requirement_assignment:
    anyOf:
      - type: string
      - type: object
        properties:
          capability:
            type: string
          node:
            type: string
          relationship:
            anyOf:
              - type: string
              - type: object
                properties:
                  type:
                    type: string
                  properties:
                    type: object
                    additionalProperties:
                      $ref: "#/definitions/property_assignment"
                  interfaces:
                    type: object
                    additionalProperties:
                      $ref: "#/definitions/interface_definition_in_templates"
                additionalProperties: false
          node_filter:
            $ref: "#/definitions/node_filter_definition"
          occurrences:
            $ref: "#/definitions/occurrences"
        additionalProperties: false

  # Section 3.8.3
  node_template:
    type: object
    properties:
      type:
        type: string
      description:
        $ref: "#/definitions/description"
      metadata:
        $ref: "#/definitions/metadata"
      directives:
        $ref: "#/definitions/directives"
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_assignment"
      attributes:
        type: object
        additionalProperties:
          $ref: "#/definitions/attribute_assignment"
      requirements:
        type: array
        items:
          type: object
          additionalProperties:
            $ref: "#/definitions/requirement_assignment"
          maxProperties: 1
      capabilities:
        type: object
        additionalProperties:
          $ref: "#/definitions/capability_assignment"
      interfaces:
        type: object
        additionalProperties:
          $ref: "#/definitions/interface_definition_in_templates"
      artifacts:
        type: object
        additionalProperties:
          $ref: "#/definitions/artifact_definition"
      node_filter:
        $ref: "#/definitions/node_filter_definition"
      copy:
        type: string
    additionalProperties: false
    required: [ type ]

  # Section 3.8.4
  relationship_template:
    type: object
    properties:
      type:
        type: string
      description:
        $ref: "#/definitions/description"
      metadata:
        $ref: "#/definitions/metadata"
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_assignment"
      attributes:
        type: object
        additionalProperties:
          $ref: "#/definitions/attribute_assignment"
      interfaces:
        type: object
        additionalProperties:
          $ref: "#/definitions/interface_definition_in_templates"
      copy:
        type: string
    additionalProperties: false
    required: [ type ]

  # Section 3.8.5    property 'interfaces' is no longer there in 1.3
  group_definition:
    type: object
    properties:
      type:
        type: string
      description:
        $ref: "#/definitions/description"
      metadata:
        $ref: "#/definitions/metadata"
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_assignment"
      members:
        type: array
        items:
          type: string
    additionalProperties: false
    required: [ type ]

  # Section 3.8.6
  policy_definition:
    type: object
    properties:
      type:
        type: string
      description:
        $ref: "#/definitions/description"
      metadata:
        $ref: "#/definitions/metadata"
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_assignment"
      targets:
        type: array
        items:
          type: string
      triggers:
        type: object
        additionalProperties:
          $ref: "#/definitions/trigger_definition"
    additionalProperties: false
    required: [ type ]

  # Section 3.8.7
  imperative_workflow_definition:
    type: object
    anyOf: # in certain cases both following properties could match
      - properties:
          description:
            $ref: "#/definitions/description"
          metadata:
            $ref: "#/definitions/metadata"
          inputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/parameter_definition"
          preconditions:
            type: array
            items:
              $ref: "#/definitions/workflow_precondition_definition"
          steps:
            type: object
            additionalProperties:
              $ref: "#/definitions/workflow_step_definition"
          outputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/attribute_mapping"
        additionalProperties: false
      - properties:
          description:
            $ref: "#/definitions/description"
          metadata:
            $ref: "#/definitions/metadata"
          inputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/parameter_definition"
          preconditions:
            type: array
            items:
              $ref: "#/definitions/workflow_precondition_definition"
          implementation:
            $ref: "#/definitions/operation_implementation_definition"
          outputs:
            type: object
            additionalProperties:
              $ref: "#/definitions/attribute_mapping"
        additionalProperties: false

  # Section 3.8.8   'value' becomes deprecated,
  # Description of keyname mapping in 1.3 suggests maxItems amounts to 1 whereas it was 3 in TOSCA 1.2. I saw no counter-example, so set it from 3 to 1.
  property_mapping:
    anyOf:
      - $ref: "#/definitions/value"
      - type: array
        items:
          type: string
        minItems: 1
        maxItems: 1
      - type: object
        oneOf:
          - properties:
              mapping:
                type: array
                items:
                  - type: string
                maxItems: 1
            # deprecated:
          - properties:
              value:
                $ref: "#/definitions/value"
        additionalProperties: false

  # Section 3.8.9
  attribute_mapping:
    anyOf:
      - $ref: "#/definitions/value"
      - type: array
        items:
          type: string
        minItems: 1
        maxItems: 1
      - type: object
        properties:
          mapping:
            type: array
            items:
              - type: string
            maxItems: 1
        additionalProperties: false

  # Section 3.8.10
  capability_mapping:
    anyOf:
      - type: array
        items:
          type: string
        minitems: 2
        maxItems: 2
      - type: object
        oneOf:
          - properties:
              mapping:
                type: array
                items:
                  type: string
                minItems: 2
                maxItems: 2
          - properties:
              properties:
                type: object
                additionalProperties:
                  $ref: "#/definitions/property_assignment"
              attributes:
                type: object
                additionalProperties:
                  $ref: "#/definitions/attribute_assignment"
        additionalProperties: false

  # Section 3.8.11
  requirement_mapping:
    anyOf:
      - type: array
        items:
          - type: string
        minItems: 2
        maxItems: 2
      - type: object
        oneOf:
          - properties:
              mapping:
                type: array
                items:
                  type: string
                minItems: 2
                maxItems: 2
          - properties:
              properties:
                type: object
                additionalProperties:
                  $ref: "#/definitions/property_assignment"
              attributes:
                type: object
                additionalProperties:
                  $ref: "#/definitions/attribute_assignment"
        additionalProperties: false

  # Section 3.8.12
  interface_mapping:
    type: object
    additionalProperties:
      type: string

  # Section 3.8.13
  substitution_mapping:
    type: object
    properties:
      node_type:
        type: string
      # 1.3 ->
      substitution_filter:
        $ref: "#/definitions/node_filter_definition"
      properties:
        type: object
        additionalProperties:
          $ref: "#/definitions/property_mapping"
      attributes:
        type: object
        additionalProperties:
          $ref: "#/definitions/attribute_mapping"
      capabilities:
        type: object
        additionalProperties:
          $ref: "#/definitions/capability_mapping"
      requirements:
        anyOf:
          - type: object
            additionalProperties:
              $ref: "#/definitions/requirement_mapping"
          - type: array
            items:
              type: object
              additionalProperties:
                $ref: "#/definitions/requirement_mapping"
              maxProperties: 1
      interfaces:
        type: object
        additionalProperties:
          $ref: "#/definitions/interface_mapping"
    additionalProperties: false
    required: [ node_type ]

  # Section 3.9
  topology_template_definition:
    type: object
    properties:
      description:
        $ref: "#/definitions/description"
      inputs:
        type: object
        additionalProperties:
          $ref: "#/definitions/parameter_definition"
      node_templates:
        type: object
        additionalProperties:
          $ref: "#/definitions/node_template"
      relationship_templates:
        type: object
        additionalProperties:
          $ref: "#/definitions/relationship_template"
      groups:
        type: object
        additionalProperties:
          $ref: "#/definitions/group_definition"
      policies:
        type: array
        items:
          type: object
          additionalProperties:
            $ref: "#/definitions/policy_definition"
      outputs:
        type: object
        additionalProperties:
          $ref: "#/definitions/parameter_definition"
      substitution_mappings:
        $ref: "#/definitions/substitution_mapping"
      workflows:
        type: object
        additionalProperties:
          $ref: "#/definitions/imperative_workflow_definition"
    additionalProperties: false

# Section 3.10: Service Template definition
  service_template_definition:
    type: object
    properties:
      # Section 3.10.3.1
      tosca_definitions_version:
        type: string
      namespace:
        type: string
        format: uri
      # Section 3.10.3.2
      metadata:
        allOf:
          - $ref: "#/definitions/metadata"
          - properties:
              # Section 3.10.3.3
              template_name:
                type: string
              # Section 3.10.3.4
              template_author:
                type: string
              # Section 3.10.3.5
              template_version:
                $ref: "#/definitions/version"
      # Section 3.10.3.6
      description:
        $ref: "#/definitions/description"
      # Section 3.10.3.7
      dsl_definitions: # map of YAML macros
        type: object
      # Section 3.10.3.8
      repositories: # map of repository definitions
        type: object
        additionalProperties:
          $ref: "#/definitions/repository_definition"
      # Section 3.10.3.9
      imports: # ordered list of import definitions
        type: array
        items:
          $ref: "#/definitions/import_definition"
      # Section 3.10.3.??
      artifact_types: # map of artifact types
        type: object
        additionalProperties:
          $ref: "#/definitions/artifact_type"
      # Section 3.10.3.10
      data_types: # map of data types
        type: object
        additionalProperties:
          $ref: "#/definitions/data_type"
      # Section 3.10.3.11
      capability_types: # map of capability types
        type: object
        additionalProperties:
          $ref: "#/definitions/capability_type"
      # Section 3.10.3.12
      interface_types: # map of interface types
        type: object
        additionalProperties:
          $ref: "#/definitions/interface_type"
      # Section 3.10.3.13
      relationship_types: # map of relationship types
        type: object
        additionalProperties:
          $ref: "#/definitions/relationship_type"
      # Section 3.10.3.14
      node_types: # map of node types
        type: object
        additionalProperties:
          $ref: "#/definitions/node_type"
      # Section 3.10.3.15
      group_types: # map of group types
        type: object
        additionalProperties:
          $ref: "#/definitions/group_type"
      # Section 3.10.3.16
      policy_types: # map of policy types
        type: object
        additionalProperties:
          $ref: "#/definitions/policy_type"
      topology_template:
        $ref: "#/definitions/topology_template_definition"
    required: [ tosca_definitions_version ]
    additionalProperties: false
